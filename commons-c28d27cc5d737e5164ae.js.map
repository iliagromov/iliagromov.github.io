{"version":3,"file":"commons-c28d27cc5d737e5164ae.js","mappings":"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","sources":["webpack://frontend/../src/image-utils.ts","webpack://frontend/../src/components/hooks.ts","webpack://frontend/../src/components/layout-wrapper.tsx","webpack://frontend/../src/components/picture.tsx","webpack://frontend/../src/components/placeholder.tsx","webpack://frontend/../src/components/main-image.tsx","webpack://frontend/../src/components/gatsby-image.server.tsx","webpack://frontend/../src/components/gatsby-image.browser.tsx","webpack://frontend/../src/components/static-image.server.tsx","webpack://frontend/../src/components/static-image.tsx","webpack://frontend/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n"],"names":["g","p","m","f","w","e","console","warn","y","sortNumeric","t","b","map","src","width","join","v","lastIndexOf","a","slice","length","E","layout","height","i","sourceMetadata","s","breakpoints","r","aspectRatio","n","formats","o","toLowerCase","l","h","Math","round","k","generateImageSource","filename","format","fit","options","S","pluginName","d","reporter","c","backgroundColor","u","placeholderURL","Error","Set","size","has","delete","add","Object","entries","filter","_ref","_ref2","outputPixelDensities","M","$","sizes","presentationWidth","presentationHeight","unscaledWidth","N","sources","I","forEach","Boolean","find","fallback","srcSet","push","type","x","images","placeholder","Array","from","concat","_toConsumableArray","sort","_ref3","min","includes","Number","MAX_SAFE_INTEGER","max","j","hasNativeLazyLoadSupport","HTMLImageElement","prototype","T","gatsbyImageData","gatsbyImage","childImageSharp","W","R","_","className","style","C","baseUrl","urlBuilder","sourceWidth","sourceHeight","O","loading","shouldLoad","opacity","z","position","top","left","bottom","right","objectFit","objectPosition","transition","D","_s$images$sources2","_r$sources","_ref4","_s$images$sources","media","image","apply","P","A","_ref5","paddingTop","maxWidth","display","alt","role","q","children","H","F","G","decoding","V","_ref6","key","B","propTypes","displayName","U","Y","X","J","Z","K","replace","Q","_len","arguments","_key","ee","te","ae","ie","se","re","ne","as","class","onStartLoad","onLoad","onError","JSON","stringify","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","oe","le","de","__imageData","__error","ce","imgClassName","imgStyle","he","_len2","_key2","ue","ge","pe","UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","camelCase","input","isArray","TypeError","pascalCase","preserveConsecutiveUppercase","trim","locale","string","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","preserveCamelCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","lastIndex","m1","charAt","postProcess","identifier","module","exports"],"sourceRoot":""}