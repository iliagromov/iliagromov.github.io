{"version":3,"file":"commons-1be9a945d12877d043bf.js","mappings":"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","sources":["webpack://frontend/./node_modules/camelcase/index.js","webpack://frontend/../src/image-utils.ts","webpack://frontend/../src/components/hooks.ts","webpack://frontend/../src/components/layout-wrapper.tsx","webpack://frontend/../src/components/picture.tsx","webpack://frontend/../src/components/placeholder.tsx","webpack://frontend/../src/components/main-image.tsx","webpack://frontend/../src/components/gatsby-image.server.tsx","webpack://frontend/../src/components/gatsby-image.browser.tsx","webpack://frontend/../src/components/static-image.server.tsx","webpack://frontend/../src/components/static-image.tsx"],"sourcesContent":["'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n"],"names":["UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","camelCase","input","options","Array","isArray","TypeError","pascalCase","preserveConsecutiveUppercase","map","x","trim","filter","length","join","toLowerCase","locale","string","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","lastIndex","m1","charAt","_","identifier","m","postProcess","module","exports","g","p","f","w","e","console","warn","y","sortNumeric","t","b","src","width","v","lastIndexOf","a","E","layout","height","sourceMetadata","s","breakpoints","r","aspectRatio","n","formats","o","l","h","Math","round","k","generateImageSource","filename","format","fit","S","pluginName","d","reporter","c","backgroundColor","u","placeholderURL","Error","Set","size","has","delete","add","Object","entries","_ref","_ref2","outputPixelDensities","M","$","sizes","presentationWidth","presentationHeight","unscaledWidth","N","sources","I","forEach","Boolean","find","fallback","srcSet","push","type","images","placeholder","from","concat","_toConsumableArray","sort","_ref3","min","includes","Number","MAX_SAFE_INTEGER","max","j","hasNativeLazyLoadSupport","HTMLImageElement","prototype","T","gatsbyImageData","gatsbyImage","childImageSharp","W","R","className","style","C","baseUrl","urlBuilder","sourceWidth","sourceHeight","O","loading","shouldLoad","opacity","z","position","top","left","bottom","right","objectFit","objectPosition","transition","D","_s$images$sources2","_r$sources","_ref4","_s$images$sources","media","image","apply","P","A","_ref5","paddingTop","maxWidth","display","alt","role","q","children","H","F","G","decoding","V","_ref6","key","B","propTypes","displayName","U","Y","X","J","Z","K","Q","_len","arguments","_key","ee","te","ae","ie","se","re","ne","as","class","onStartLoad","onLoad","onError","JSON","stringify","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","oe","le","de","__imageData","__error","ce","imgClassName","imgStyle","he","_len2","_key2","ue","ge","pe"],"sourceRoot":""}